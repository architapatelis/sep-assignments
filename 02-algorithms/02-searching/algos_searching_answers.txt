collection = ["A", "B", "C", "D", "E", "F", "G"]

1) Given the alphabetically sorted collection in this checkpoint, how many iterations would it take to find the value G using linear search?
Ans: 7

2) Given the alphabetically sorted collection in this checkpoint, how many iterations would it take to find the value G using binary search?
Ans: 3

3) Calculate fib(10), fib(11), fib(12) by hand.
Ans:
fib(10) = fib(10-2) + fib(10-1) = fib(8) + fib(9) = 21 + 34 = 55
fib(11) = fib(11-2) + fib(11-1) = fib(9) + fib(10) = 34 + 55 = 89
fib(12) = fib(12-2) + fib(12-1) = fib(10) + fib(11) = 55 + 89 = 144

4) Compare the time it takes to run fib(20) between the iterative solution from the previous checkpoint and recursive solutions.
Ans:
"Fibonnaci Recursive"
  0.000000   0.000000   0.000000 (  0.000983)
"Fibonnaci Iterative"
  0.000000   0.000000   0.000000 (  0.000006)


5) Given an unsorted collection of a million items, which algorithm would you choose between linear search and binary search? Would you use an iterative or recursive solution? Explain your reasoning.
Ans:
A binary search requires the collection to be sorted so I would use a linear search. I would use an iterative solution because it is faster than a recursive solution, as we can see in the benchmark test result above.


# benchmark test results:
# to find the number 888777 in an array of 1000000 numbers:
# "Binary Search Recursive"
  0.010000   0.000000   0.010000 (  0.008600)
  "Binary Search Iterative"
  0.000000   0.000000   0.000000 (  0.000004)

6) Given a sorted collection of a million items, which algorithm would you choose between linear search and binary search? Would you use an iterative or recursive solution? Explain your reasoning.
Ans:
If the collection is sorted I would use a binary search, since for each iteration it divides the collection in half, therefore making it faster. In this case, I would use iterative solution because it runs faster than recursive, as we can tell from the benchmark test.
