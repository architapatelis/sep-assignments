RESULTS:

** Binary Search Tree:

Inserting binary search tree
  0.010000   0.000000   0.010000 (0.021875)
Searching 5000th element in binary search tree
  0.020000   0.000000   0.020000 (0.017898)
Deleting a node
  0.020000   0.000000   0.020000 (0.018094)

** Min Binary Heap:

Inserting in min binary heap
  0.020000   0.000000   0.020000 (0.022014)
Searching 5000th element in heap
  0.020000   0.010000   0.030000 (0.024092)
Deleting a node
  0.030000   0.000000   0.030000 (0.024564)

1) How much time does an average insertion consume in the Binary Search Tree compared to the Heap?
Ans: Both Binary Search Tree and Min Binary Heap perform at nearly the same rate (0.021875 vs 0.022014, respectively)

2) How much time does finding 50000 in the Binary Search Tree consume compared to the Heap?
Ans: Binary Search Tree = 0.017898
     Heap =  0.024092

3) How much time does the average deletion consume in a Binary Search Tree compared to the Heap?
Ans: Binary Search Tree = 0.018094
     Heap = 0.024564

When would you use a Binary Search Tree and why?
Ans: We can use binary search trees when we want to search over and over again for the same type of data, just like binary searches on arrays are. However, if the data needs to be changed, inserted, or deleted, a binary tree is better than an array. Because, in an array we would have to do a lot of copying when we have a large number of values. Whereas in a binary tree it's just a matter of swapping nodes. A binary tree is memory-efficient because it does not reserve more memory than it needs. A Binary Search tree is also more efficient than a linked list, since we don't potentially have to go through each linked node in order to find a particular node.

When would you use an Heap and why?
Ans: We can use a binary heap in order to implement a priority queue ordered by priority - each node is higher priority than everything below it. However, searching, deleting and inserting a node in a binary heap is not as efficient as a binary search tree.
