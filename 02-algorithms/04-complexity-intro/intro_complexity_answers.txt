1) Describe an analogy for relating an algorithm that has efficiency O(1) and another algorithm that has O(2n).
Ans: An algorithm that has O(1) is a jet and an algorithm that has O(2n) is a person walking.

2) In plain English, what is the best case scenario for binary search?
Ans: The best case scenario for binary search is that the element we are searching for is in the middle of the set of searched items.

3)In plain English, what is the worst-case scenario for binary search?
Ans: The worst case scenario is that the element we are searching for can't be found. Or when we repeatedly have to halve the array, until we reach the last remaining value.

4) In plain English, what is the bounded-case scenario for binary search?
Ans: The bounded-case scenario in a binary search is when the item we are searching for is located in the array, and unlike in the worst case, this time we will find the value before we reach the last remaining value.

5) Create a graph using the data below. Here's a CSV with the values you'll need.
https://docs.google.com/spreadsheets/d/1PJV2CyCd_o27D1higSpwpQ6VBrFNwqskfDnjEQirWAE/edit#gid=0

6)What's the asymptotic limit as n approaches infinity for the function defined by the values above?
Ans: Infinity

7)What is the Big-O of an algorithm that has the data points above?
Ans: In a sorted array of n values, the run-time of binary search for a value, is
O(log n), in the worst case.

8) Write a Ruby script that calculates and prints the N number, given an iteration, for linear search in the worst case (similar to the graph above).
Ans: see linear_search.rb


9) Create a graph from the output using Google Sheets or other graphing software. Analyze the graph and denote its Big-O somewhere on the graph.
https://docs.google.com/spreadsheets/d/1PJV2CyCd_o27D1higSpwpQ6VBrFNwqskfDnjEQirWAE/edit#gid=0
linear search: O(n)

10) What is the Big-O of binary search?
Ans: O(logn)

11) What is the Big-Ω of binary search?
Ans: O(1)

12) What is the Big-Ө of binary search?
Ans: O(logn)
